OmnyIQ SDK for a connected device using C and XMPP
==================================================

	Using the popular XMPP secure messaging protocol, source-code included, the OmnyIQ-SDK enables a connected device to securely 
	upload diagnostics data to the Omny IQ cloud. Then from the cloud we can visualize diagnostics and analytics information from 
	the data captured from the device as well as send requests to the device to execute commands.
	
	Omny IQ provides responsive diagnostics, analytics, visualization and control software for your connected hardware devices to 
	perform optimally and collaborate reliably in an increasingly complex connected environment. Our goal is to eliminate your need 
	for writing server code or maintaining servers for these functions. Using this OmnyIQ-SDK, all it takes is a few lines of code 
	to save data to and retrieve data from the Omny IQ cloud and to use the applications we provide for troubleshooting, remote
	diagnostics and preventive care.

	
Compile And Install
===================
		
	A. x86 compile
		step 1:build libraries
			#cd OmnyIQ-SDK/src
			#make
			#make install
			you will find libdevice.a in build/lib and header files in build/include

		step 2:build example
			#cd ../build/example2
			#make
	
	B. cross-compile
		step 1:set up your environment
			#export PATH+=<your toolchain's dir>    //eg. export PATH+=/projects/hnd/tools/linux/hndtools-arm-linux-2.6.36-uclibc-4.5.3/bin

		step 2:build libraries
			#cd OmnyIQ-SDK/src
			#HOST=arm-brcm-linux-uclibcgnueabi make
			#make install
			you will find libdevice.a in build/lib and header files in build/include

		step 3:build example
			#cd ../build/example2
			#HOST=arm-brcm-linux-uclibcgnueabi make


Sources Structure
=================
	.
	├── build						---  the target dir that libraries and hearder files will be installed in
	│   ├── examples					---  
	│   │   ├── example1					---  a simple exampe
	│   │   │   ├── client.c
	│   │   │   └── Makefile
	│   │   └── example2					---  another simple example with two pthreads
	│   │       ├── client_thread.c
	│   │       └── Makefile
	│   ├── include						---  after make install, the DeviceProfileInterface.h & cJSON.h & Debug.h 
	│	│						---  will be copied into build/include
	│   └── lib						---  after make install, the libdevice.a will be copied into build/lib
	├── src
	│	├── cJSON					---  the source files to make JSON data
	│	│   ├── cJSON.c
	│	│   └── cJSON.h
	│	├── Debug.h
	│	├── DeviceProfile.c				---  the source file to use xmpp protocol
	│	├── DeviceProfileInterface.h			---  the heaader file supplied to developers
	│	├── Makefile
	│	└── third_parts					---  third_parts libraries
	│	    └── iksemel-1.4				---  source code of the xmpp library
	├── README.build
	├── README.API
	└── README.md


Library APIs
============

	See README.API
	
	
Debugging
=========

	Not only you can use the API "Set_Xmpp_Log_On" to analyse the stdout from console, but you can also use any kinds
	of XMPP client(i.e spark  http://www.igniterealtime.org/projects/spark/) to reveive the device info that sent from
	your device. 
	
	XMPP server info
	
		Server address: xmpp.omnyiq.com
		Server port:	5222
			
	We can create a receiver account for testing on this XMPP server, and then,
	pass the account name to Device_Ini function as the second parameter.
	
	For instance, the XMPP account name is "example", call Device_Ini API like this:
	
		Device_Init(&DevInfo, "example", NULL);
		
